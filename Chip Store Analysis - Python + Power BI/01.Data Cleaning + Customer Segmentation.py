# -*- coding: utf-8 -*-
"""TASK 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QRBsW5th2RIyBb_PUK4hQ1cEjsKIXy9z
"""

#Importing the libaries + file upload
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files
uploaded = files.upload()

#import datasets

df_transaction = pd.read_excel("QVI_transaction_data.xlsx")
df_behaviour = pd.read_csv("QVI_purchase_behaviour.csv")

#checking the null and data type formats for transaction
df_transaction.info()

#change excel int to datetime
df_transaction['DATE'] = pd.to_datetime(df_transaction["DATE"], unit="D", origin="1899-12-30")

#checking the null and data type formats for beahviour
df_behaviour.info()

#Checking chip names
df_transaction["PROD_NAME"].unique()

import re
from collections import Counter

# Split all product names into words
all_words = " ".join(df_transaction["PROD_NAME"].astype(str)).lower().split()

# Remove words with digits or special characters
clean_words = [w for w in all_words if re.match(r'^[a-zA-Z]+$', w)]

# Count frequency
word_counts = Counter(clean_words)

# Top 20 most common words
print(word_counts.most_common(20))

#flag salsa products and drop collumns that have them

df_transaction["SALSA"] = df_transaction["PROD_NAME"].str.lower().str.contains("salsa")

df_transaction = df_transaction[df_transaction["SALSA"] == False].drop(columns=["SALSA"])

#find any unsual values
df_transaction.describe()

# Box plot to visualize outliers

sns.boxplot(y=df_transaction['PROD_QTY'])
plt.title('Product Quantity Box Plot')

#remove outlier

df_transaction = df_transaction[df_transaction["PROD_QTY"] != 200]

#extracting new columns from data
# Extract pack size
df_transaction["PACK_SIZE"] = df_transaction["PROD_NAME"].str.extract(r'(\d+)(?=g)').astype(float)

# Extract brand (first word)
df_transaction["BRAND"] = df_transaction["PROD_NAME"].str.split().str[0]

#with cleaning done now merging with behaviour data to make one data frame

df_merged = pd.merge(
    df_transaction,
    df_behaviour,
    how="left",
    left_on="LYLTY_CARD_NBR",
    right_on="LYLTY_CARD_NBR"
)

#now to segment sales and answer question : who spends the most on chips
segment_sales = df_merged.groupby(["LIFESTAGE","PREMIUM_CUSTOMER"])["TOT_SALES"].sum().reset_index().copy()

sns.barplot(data=segment_sales, x="LIFESTAGE", y="TOT_SALES", hue="PREMIUM_CUSTOMER")
plt.xticks(rotation=90)
plt.title("Total Sales by Customer Segment")
plt.show()

#find out how many customers there are per segment
#"LYLTY_CARD_NBR" counts the unique amount of customers per segment

segment_customers = df_merged.groupby(["LIFESTAGE","PREMIUM_CUSTOMER"])["LYLTY_CARD_NBR"].nunique().reset_index()

segment_customers

#plotting the data
sns.barplot(data=segment_customers, x="LIFESTAGE", y="LYLTY_CARD_NBR", hue="PREMIUM_CUSTOMER")
plt.title("Number of Unique Customers by Segment")
plt.xticks(rotation=90)
plt.ylabel("Unique Customers")
plt.show()

#avg units per customer, usually median is better, but mean tells a more accurate story in this case
units_per_customer = df_merged.groupby(["LIFESTAGE","PREMIUM_CUSTOMER"])["PROD_QTY"].mean().reset_index()

units_per_customer

#now to find the average unit price per segment

df_merged["UNIT_PRICE"] = df_merged["TOT_SALES"] / df_merged["PROD_QTY"]
avg_price_segment = df_merged.groupby(["LIFESTAGE","PREMIUM_CUSTOMER"])["UNIT_PRICE"].mean().reset_index()

avg_price_segment

#combine segments to plot
segment_combined = pd.merge(units_per_customer, avg_price_segment, on=["LIFESTAGE","PREMIUM_CUSTOMER"])

plt.figure(figsize=(10,7))
sns.scatterplot(
    data=segment_combined,
    x="PROD_QTY", y="UNIT_PRICE",
    hue="PREMIUM_CUSTOMER", style="LIFESTAGE", s=150)
plt.title("Segment Positioning: Units per Customer vs Price Paid")
plt.xlabel("Average Units per Customer")
plt.ylabel("Average Price per Pack ($)")
plt.show()

#now locating the top brand based on segments

top_brands = df_merged.groupby(["LIFESTAGE","PREMIUM_CUSTOMER","BRAND"])["TOT_SALES"].sum().reset_index()
top_brands

#convert to pivot table and plot

brand_pivot = top_brands.pivot_table(
    values="TOT_SALES",
    index="BRAND",
    columns=["LIFESTAGE","PREMIUM_CUSTOMER"],
    fill_value=0
)

plt.figure(figsize=(14,8))
sns.heatmap(brand_pivot, cmap="YlGnBu", cbar_kws={'label': 'Total Sales ($)'})
plt.title("Brand Preference by Segment (Heatmap)")
plt.ylabel("Brand")
plt.xlabel("Customer Segment")
plt.show()

#additional pack size preference segments

pack_size_pref = df_merged.groupby(["LIFESTAGE","PREMIUM_CUSTOMER","PACK_SIZE"])["TOT_SALES"].sum().reset_index()

pack_size_pref