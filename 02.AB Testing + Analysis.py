# -*- coding: utf-8 -*-
"""TASK 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HJ-wfamIWTGh_ECbSs7ALpZFWl7Z-E1W
"""

#Importing the libaries + file upload
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files
uploaded = files.upload()

#import data and quick date to datetime change
df_final_chips = pd.read_csv("Final_chips.csv")
df_final_chips["DATE"] = pd.to_datetime(df_final_chips["DATE"])
df_final_chips.info()

#create month year date column
df_final_chips["MONTH_YEAR"]=df_final_chips["DATE"].dt.strftime("%m/%Y")
df_final_chips

#sort each store and find sales per month

total_grouped = df_final_chips.groupby(["STORE_NBR","MONTH_YEAR"])["TOT_SALES"].sum().reset_index().sort_values(["STORE_NBR","MONTH_YEAR"])
total_grouped

#now to sum the totals for each store

total_sales_stores = total_grouped.groupby("STORE_NBR")["TOT_SALES"].sum()

total_sales_stores

#Looking at the specific sales for the trial stores

trial_store = total_sales_stores[[77, 86, 88]]

trial_store

from pickle import TRUE

#now to look for a control store, i will start by looking for a control store for store 77

total_sorted = total_sales_stores.sort_values(ascending=TRUE).iloc[70:80]

total_sorted

#now to draw out and isolate the 10 stores

stores_control_one = [205,188,77,141,50,38,90,18,249,256]

date_range = pd.date_range("2018-07-01", "2019-01-01", freq="MS").strftime("%m/%Y")

pivot_chips1 = (
    total_grouped[total_grouped['STORE_NBR'].isin(stores_control_one)]
    .pivot_table(
        index="STORE_NBR",
        columns="MONTH_YEAR",
        values="TOT_SALES",
        aggfunc="sum",
        fill_value=0
    )
    .reindex(columns=date_range, fill_value=0)   # ensure the columns follow the desired range
    .reset_index()
)

pivot_chips1

#quick plot of stores

plt.figure(figsize=(12,6))


pivot_chips1.set_index("STORE_NBR").T.plot(kind="line", marker="o", linewidth=2)

plt.title("Monthly Chip Sales by Store", fontsize=16, weight="bold")
plt.xlabel("Month", fontsize=12)
plt.ylabel("Total Sales ($)", fontsize=12)
plt.xticks(rotation=90, fontsize=10)
plt.yticks(fontsize=10)

plt.legend(title="Store", bbox_to_anchor=(1.05, 1), loc="upper left", fontsize=9)
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

#line chart was really messy but 50 looks promising, now i will use the pearson correlation method
#pivot chart is also a bit messy so some cleanup is needed

pivot_chips1.drop(columns="STORE_NBR").T.corr(method="pearson")

pivot_indexed = pivot_chips1.set_index("STORE_NBR")


corr_matrix = pivot_indexed.T.corr(method="pearson")

corr_matrix

#50 has the closest correlation with 77

plt.figure(figsize=(12,6))

# Filter data for specific stores
chips1_graph = pivot_chips1[pivot_chips1['STORE_NBR'].isin([77, 50])]

# Create the plot
chips1_graph.set_index("STORE_NBR").T.plot(kind="line", marker="o", linewidth=2)

plt.title("Monthly Chip Sales by Store", fontsize=16, weight="bold")
plt.xlabel("Month", fontsize=12)
plt.ylabel("Total Sales ($)", fontsize=12)
plt.xticks(rotation=90, fontsize=10)
plt.yticks(fontsize=10)

plt.legend(title="Store", bbox_to_anchor=(1.05, 1), loc="upper left", fontsize=9)
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

#now to do the same with store 86 looking for the control

total_sorted_two = total_sales_stores.sort_values(ascending=TRUE).iloc[195:205]

total_sorted_two

#the same routine with drawing out and isolating the 10 stores

stores_control_two = [247,155,138,86,55,180,160,137,91,114]

date_range = pd.date_range("2018-07-01", "2019-01-01", freq="MS").strftime("%m/%Y")

pivot_chips2 = (
    total_grouped[total_grouped['STORE_NBR'].isin(stores_control_two)]
    .pivot_table(
        index="STORE_NBR",       # one row per store
        columns="MONTH_YEAR",    # each month as a column
        values="TOT_SALES",      # values = total sales
        aggfunc="sum",           # in case there are multiple entries
        fill_value=0
    )
    .reindex(columns=date_range, fill_value=0)
    .reset_index()
)

pivot_chips2

#quick plot of stores

plt.figure(figsize=(12,6))


pivot_chips2.set_index("STORE_NBR").T.plot(kind="line", marker="o", linewidth=2)

plt.title("Monthly Chip Sales by Store", fontsize=16, weight="bold")
plt.xlabel("Month", fontsize=12)
plt.ylabel("Total Sales ($)", fontsize=12)
plt.xticks(rotation=90, fontsize=10)
plt.yticks(fontsize=10)

plt.legend(title="Store", bbox_to_anchor=(1.05, 1), loc="upper left", fontsize=9)
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

#using the same code to get the same correlations
#pivot chart is also a bit messy so some cleanup is needed

pivot_chips2.drop(columns="STORE_NBR").T.corr(method="pearson")

pivot_indexed = pivot_chips2.set_index("STORE_NBR")


corr_matrix = pivot_indexed.T.corr(method="pearson")

corr_matrix

#155 has a decent corrleation with our trial 86

plt.figure(figsize=(12,6))

# Filter data for specific stores
chips2_graph = pivot_chips2[pivot_chips2['STORE_NBR'].isin([86, 155])]

# Create the plot
chips2_graph.set_index("STORE_NBR").T.plot(kind="line", marker="o", linewidth=2)

plt.title("Monthly Chip Sales by Store", fontsize=16, weight="bold")
plt.xlabel("Month", fontsize=12)
plt.ylabel("Total Sales ($)", fontsize=12)
plt.xticks(rotation=90, fontsize=10)
plt.yticks(fontsize=10)

plt.legend(title="Store", bbox_to_anchor=(1.05, 1), loc="upper left", fontsize=9)
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

#now for the final trial store we find a range

total_sorted_three = total_sales_stores.sort_values(ascending=TRUE).iloc[261:271]

total_sorted_three

#the same routine with drawing out and isolating the 10 stores

stores_control_three = [26,203,4,199,58,40,237,165,88,226]

date_range = pd.date_range("2018-07-01", "2019-01-01", freq="MS").strftime("%m/%Y")

pivot_chips3 = (
    total_grouped[total_grouped['STORE_NBR'].isin(stores_control_three)]
    .pivot_table(
        index="STORE_NBR",       # one row per store
        columns="MONTH_YEAR",    # each month as a column
        values="TOT_SALES",      # values = total sales
        aggfunc="sum",           # in case there are multiple entries
        fill_value=0
    )
    .reindex(columns=date_range, fill_value=0)
    .reset_index()
)

pivot_chips3

#quick plot of stores

plt.figure(figsize=(12,6))


pivot_chips3.set_index("STORE_NBR").T.plot(kind="line", marker="o", linewidth=2)

plt.title("Monthly Chip Sales by Store", fontsize=16, weight="bold")
plt.xlabel("Month", fontsize=12)
plt.ylabel("Total Sales ($)", fontsize=12)
plt.xticks(rotation=90, fontsize=10)
plt.yticks(fontsize=10)

plt.legend(title="Store", bbox_to_anchor=(1.05, 1), loc="upper left", fontsize=9)
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

#same code for everything,just changing the pivot table

pivot_chips3.drop(columns="STORE_NBR").T.corr(method="pearson")

pivot_indexed = pivot_chips3.set_index("STORE_NBR")


corr_matrix = pivot_indexed.T.corr(method="pearson")

corr_matrix

#very low correlation for all across the board so going with highest correlation and most similar sales 237

plt.figure(figsize=(12,6))

# Filter data for specific stores
chips3_graph = pivot_chips3[pivot_chips3['STORE_NBR'].isin([88, 237])]

# Create the plot
chips3_graph.set_index("STORE_NBR").T.plot(kind="line", marker="o", linewidth=2)

plt.title("Monthly Chip Sales by Store", fontsize=16, weight="bold")
plt.xlabel("Month", fontsize=12)
plt.ylabel("Total Sales ($)", fontsize=12)
plt.xticks(rotation=90, fontsize=10)
plt.yticks(fontsize=10)

plt.legend(title="Store", bbox_to_anchor=(1.05, 1), loc="upper left", fontsize=9)
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

#now we can begin to test if total sales are significantly different in the trial period
#creating small dataframes so i can quickly access some checks

trial_period = df_final_chips[(df_final_chips["MONTH_YEAR"] >= "02/2019") & (df_final_chips["MONTH_YEAR"] <= "04/2019")]

t_store77 = trial_period[trial_period["STORE_NBR"] == 77]
c_store50 = trial_period[trial_period["STORE_NBR"] == 50]

t_store86 = trial_period[trial_period["STORE_NBR"] == 86]
c_store155 = trial_period[trial_period["STORE_NBR"] == 155]

t_store88 = trial_period[trial_period["STORE_NBR"] == 88]
c_store237 = trial_period[trial_period["STORE_NBR"] == 237]

t_store77

#checking sales during the trial period for 77 and its control 50

grouped77 = t_store77.groupby("MONTH_YEAR")
grouped50 = c_store50.groupby("MONTH_YEAR")

grouped77["TOT_SALES"].sum().plot(kind="line", marker="o", linewidth=2, label = "Trial Store 77")
grouped50["TOT_SALES"].sum().plot(kind="line", marker="o", linewidth=2, label = "Control Store 50")
plt.ylabel("Sales")
plt.legend()
plt.title("Sales during Trial Period")
plt.show()

#the task also said to check for repeating cusomters so it can be done simply

customer_frequency77 = t_store77["LYLTY_CARD_NBR"].value_counts()

repeating_customers77 = customer_frequency77[customer_frequency77 > 1]

print(f"\nNumber of repeating customers: {len(repeating_customers77)}")
print(f"Total number of unique customers: {len(customer_frequency77)}")
print(f"Percentage of repeating customers: {len(repeating_customers77)/len(customer_frequency77)*100:.2f}%")

#now we do the same for the control store
customer_frequency50 = c_store50["LYLTY_CARD_NBR"].value_counts()

repeating_customers50 = customer_frequency50[customer_frequency50 > 1]

print(f"\nNumber of repeating customers: {len(repeating_customers50)}")
print(f"Total number of unique customers: {len(customer_frequency50)}")
print(f"Percentage of repeating customers: {len(repeating_customers50)/len(customer_frequency50)*100:.2f}%")

#checking sales during the trial period for 86 and its control 155

grouped86 = t_store86.groupby("MONTH_YEAR")
grouped155 = c_store155.groupby("MONTH_YEAR")

grouped86["TOT_SALES"].sum().plot(kind="line", marker="o", linewidth=2, label = "Trial Store 86")
grouped155["TOT_SALES"].sum().plot(kind="line", marker="o", linewidth=2, label = "Control Store 155")
plt.ylabel("Sales")
plt.legend()
plt.title("Sales during Trial Period")
plt.show()

#now we do the same repeating customers check for the next trial store

customer_frequency86 = t_store86["LYLTY_CARD_NBR"].value_counts()

repeating_customers86 = customer_frequency86[customer_frequency86 > 1]

print(f"\nNumber of repeating customers: {len(repeating_customers86)}")
print(f"Total number of unique customers: {len(customer_frequency86)}")
print(f"Percentage of repeating customers: {len(repeating_customers86)/len(customer_frequency86)*100:.2f}%")

#doing he same for the control one

customer_frequency155 = c_store155["LYLTY_CARD_NBR"].value_counts()

repeating_customers155 = customer_frequency155[customer_frequency155 > 1]

print(f"\nNumber of repeating customers: {len(repeating_customers155)}")
print(f"Total number of unique customers: {len(customer_frequency155)}")
print(f"Percentage of repeating customers: {len(repeating_customers155)/len(customer_frequency155)*100:.2f}%")

#checking sales during the trial period for 88 and its control 237
grouped88 = t_store88.groupby("MONTH_YEAR")
grouped237 = c_store237.groupby("MONTH_YEAR")

grouped88["TOT_SALES"].sum().plot(kind="line", marker="o", linewidth=2, label = "Trial Store 88")
grouped237["TOT_SALES"].sum().plot(kind="line", marker="o", linewidth=2, label = "Control Store 237")
plt.ylabel("Sales")
plt.legend()
plt.title("Sales during Trial Period")
plt.show()

#now we do the same repeating customers check for the final trial store

customer_frequency88 = t_store88["LYLTY_CARD_NBR"].value_counts()

repeating_customers88 = customer_frequency88[customer_frequency88 > 1]

print(f"\nNumber of repeating customers: {len(repeating_customers88)}")
print(f"Total number of unique customers: {len(customer_frequency88)}")
print(f"Percentage of repeating customers: {len(repeating_customers88)/len(customer_frequency88)*100:.2f}%")

#final check for the control tore

customer_frequency237 = c_store237["LYLTY_CARD_NBR"].value_counts()

repeating_customers237 = customer_frequency237[customer_frequency237 > 1]

print(f"\nNumber of repeating customers: {len(repeating_customers237)}")
print(f"Total number of unique customers: {len(customer_frequency237)}")
print(f"Percentage of repeating customers: {len(repeating_customers237)/len(customer_frequency237)*100:.2f}%")

#now i want to check for product quanituty during the trial period for each store and control

grouped77["PROD_QTY"].sum().plot(kind="line", marker="o", linewidth=2, label = "Trial Store 70")
grouped50["PROD_QTY"].sum().plot(kind="line", marker="o", linewidth=2, label = "Control Store 50")
plt.ylabel("Product Quantity")
plt.legend()
plt.title("Product Quantity during Trial Period")
plt.show()

grouped86["PROD_QTY"].sum().plot(kind="line", marker="o", linewidth=2, label = "Trial Store 86")
grouped155["PROD_QTY"].sum().plot(kind="line", marker="o", linewidth=2, label = "Control Store 155")
plt.ylabel("Product Quantity")
plt.legend()
plt.title("Product Quantity during Trial Period")
plt.show()

grouped88["PROD_QTY"].sum().plot(kind="line", marker="o", linewidth=2, label = "Trial Store 88")
grouped237["PROD_QTY"].sum().plot(kind="line", marker="o", linewidth=2, label = "Control Store 237")
plt.ylabel("Product Quantity")
plt.legend()
plt.title("Product Quantity during Trial Period")
plt.show()

#everything points towards the trials being sucessful with all trial stores outperforming on sales,product quantity, and repeat customers
#i will now see if it hold true per average customer

grouped77["LYLTY_CARD_NBR"].value_counts().mean()

grouped50["LYLTY_CARD_NBR"].value_counts().mean()

grouped86["LYLTY_CARD_NBR"].value_counts().mean()

grouped155["LYLTY_CARD_NBR"].value_counts().mean()

grouped88["LYLTY_CARD_NBR"].value_counts().mean()

grouped237["LYLTY_CARD_NBR"].value_counts().mean()

#now i will plot the values in groups

group1 = ["Trial Store 77", "Control Store 50"]
group2 = ["Trial Store 86", "Control Store 155"]
group3 = ["Trial Store 88", "Control Store 237"]

values_group1 = [1.256,1.034]
values_group2 = [1.214,1.25]
values_group3 = [1.256,1.176]

plt.bar(group1, values_group1, label = group1)
plt.bar(group2, values_group2, label = group2)
plt.bar(group3, values_group3, label = group3)

plt.xticks(rotation=45, ha="right")  # rotate labels so they don’t overlap
plt.ylabel("Values")
plt.title("AVG Products per Customer during Trail Period")

plt.tight_layout()  # adjust layout so labels fit nicely
plt.show()

#Overall I belive that comparing trial stores to control store:
#sales, products sold, amoutn of repeat customers, and average products per customer show
# that during the trial period, trial stores outperform control stores

